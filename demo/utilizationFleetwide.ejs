<html>
  <head>
    <link rel="stylesheet" type="text/css" href="../demo/app.css">
  </head>
  <script src="../demo/lib/jquery/jquery.min.js"></script>
  <script src="../demo/lib/d3/d3.min.js"></script>  
  <style>
    html {
      font-size: 8px;
    }
    body {
      background: inherit;
    }
    .report-wrapper {
      width: 74rem;
      height: 96rem;
      color: #4f545d!important;
      padding: 2rem;
      font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }
    p {
      font-size: 1rem;
    }
    h1, h2, h3 {
      font-family: 'Century Gothic', CenturyGothic, AppleGothic, sans-serif;
    }
    h1, h2 {
      font-weight: 100;
    }

    .h2-large {
      font-size: 2.5rem;
    }

    h3 {
      font-size: 1rem;
      text-transform: uppercase;
    }
    .report-wrapper h1 {
      font-size: 4rem;
    }

    .text-small {
      font-size: 0.9rem;
    }
 
    .text-operating {
      color: #25ad5c;
    }

    .text-idle {
      color: #666;
    }

    .text-off {
      color: #ccc;
    }

    .donut-key {
      margin-top: -150px;
    }

    .key {
      font-size: 4rem;
      font-weight: 100;
      margin-top: 5.5rem;
    }

    .value {
      font-weight: 100;
      font-size: 2.5rem;
      color: #25ad5c;
    }

    .value-description {
      color: #999;
    }

    .key-unit {
      font-size: 1rem;
    }

    .text-center {
      text-align: center;
    }

    .axis {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      shape-rendering: crispEdges;
    }

    text {
      font-size: 1rem;
      fill: #666;
    }

    .tick line {
      stroke: #aaa;
    }

    .vcenter {
      position: absolute;
      top: 50%;
      transform: translateX(-50%);
    }

    hr {
      background: #666;
      border: none;
      height: 1px;
      margin-top: 0.5rem;
    }

    .text-right {
      text-align: right;
    }

    .d3axislabel {
      border-bottom: 1px solid #ddd;
    }

  </style>
  <body>
    <div class="report-wrapper vspace">
      <div class="row vspace">
        <div class="col-xs-8 vspace">
          <h1>Utilization Estimates</h1>
          <div>
            <% var devicesLength = 0; 
                for(var i in instruments) {
                  for(var j in instruments[i].devices) {
                    devicesLength++;
                  };
                }
            %>
            <p>Fleetwide utilization and analytics data of <strong class="text-operating"><%= devicesLength %></strong> instruments</p>
            <p><strong><%= meta.dateRange %></strong></p>
            <p><strong class="text-operating">Between 8AM and 6PM</strong></p>
          </div>
        </div>
        <div class="col-xs-4 vspace">
          <img src="../demo/images/util_logo.png" class="img-fill">
          <div>
            <p class="text-small">Date Range: <%= meta.dateRange %></p>
            <p class="text-small">Reporting Device: <%= meta.reportingDevice %></p>
            <p class="text-small">Report Generated: <%= meta.generationTimestamp %></p>
          </div>
        </div>
      </div>
      <div class="row">
        <% for(var i in instruments){ %>
          <% var instrument = instruments[i] %>
          <div class="col-md-12">
            <h2 class="h2-large m-t">
              <%= instrument.instrumentType %>
            </h2>
            <hr>
          </div>
          <div class="col-xs-12 m-t m-b">
            <div class="row">
              <div class="col-xs-3">
                <h3>Utilization Range</h3>
                <h2 class="value">
                  <%= instrument.utilization.min %><span class="key-unit">%</span>
                  -
                  <%= instrument.utilization.max %><span class="key-unit">%</span>
                </h2>
              </div>
              <div class="col-xs-3">
                <h3>Total Usage (hrs)</h3>
                <h2 class="value">
                  <%= instrument.totalHours %>
                </h2>
              </div>
              <div class="col-xs-3">
                <h3>Energy Consumed</h3>
                <h2 class="value">
                  <%= instrument.totalEnergy %><span class="key-unit">kW</span>
                </h2>
              </div>
            </div>
          </div>         
          <div class="col-xs-12">
            <div class="row">
              <div class="col-xs-12" style="position: relative;">
                <h3 style="position: absolute; left: 111px; top: 0;">Usage (%)</h3>
                <div class="d3axislabel"></div>
                <h3 style="position: absolute; right: 25px; top: 0;">in use (hrs)</h3>
              </div>
            </div>
            <% for (var j = 0; j < instrument.devices.length; j++) { %>
              <div class="row">
                <div id="d3barchart<%= instrument.devices[j].deviceId %>" class="col-xs-10"></div>
                <div class="col-xs-2 text-center" style="padding-top: 0.5rem;">
                  <strong class="text-operating"><%= instrument.devices[j].usageHours %></strong>
                </div>
                <script type="text/javascript">
                  (function () {
                    var device = <%- JSON.stringify(instrument.devices[j]) %>;
                    var devicesData = [
                      {
                        data: [{device: device.name, count: device.utilization.operating}],
                        name: 'in use'
                      },
                      {
                        data: [{device: device.name, count: device.utilization.idle}],
                        name: 'idle'
                      },
                      {
                        data: [{device: device.name, count: device.utilization.off}],
                        name: 'off'
                      }
                    ];

                    var margins = {
                        top: 5,
                        left: 148,
                        right: 24,
                        bottom: 5
                    },
                    width = 500 - margins.left - margins.right,
                        height = 18 - margins.top - margins.bottom,
                        dataset = devicesData,
                        series = dataset.map(function (d) {
                            return d.name;
                        }),
                        dataset = dataset.map(function (d) {
                            return d.data.map(function (o, i) {
                                // Structure it so that your numeric
                                // axis (the stacked amount) is y
                                return {
                                    y: o.count,
                                    x: o.device
                                };
                            });
                        }),
                        stack = d3.layout.stack();

                    stack(dataset);

                    var dataset = dataset.map(function (group) {
                        return group.map(function (d) {
                            // Invert the x and y values, and y0 becomes x0
                            return {
                                x: d.y,
                                y: d.x,
                                x0: d.y0
                            };
                        });
                    }),
                        svg = d3.select('#d3barchart<%= instrument.devices[j].deviceId %>')
                            .append('svg')
                            .attr('width', width + margins.left + margins.right)
                            .attr('height', height + margins.top + margins.bottom)
                            .append('g')
                            .attr('transform', 'translate(' + margins.left + ',' + margins.top + ')'),
                        xMax = d3.max(dataset, function (group) {
                            return d3.max(group, function (d) {
                                return d.x + d.x0;
                            });
                        }),
                        xScale = d3.scale.linear()
                            .domain([0, xMax])
                            .range([0, width]),
                        devices = dataset[0].map(function (d) {
                            return d.y;
                        }),
                        _ = console.log(devices),
                        yScale = d3.scale.ordinal()
                            .domain(devices)
                            .rangeRoundBands([0, height], .1),
                        xAxis = d3.svg.axis()
                            .scale(xScale)
                            .tickSize(4, 0)
                            .orient('bottom')
                            .tickFormat(""),
                        yAxis = d3.svg.axis()
                            .scale(yScale)
                            .orient('left'),
                        colours = d3.scale.ordinal()
                                    .range(["#39b54a", "#4f545d", "#999999"]);
                        groups = svg.selectAll('g')
                            .data(dataset)
                            .enter()
                            .append('g')
                            .style('fill', function (d, i) {
                            return colours(i);
                        }),
                        rects = groups.selectAll('rect')
                            .data(function (d) {
                            return d;
                        })
                            .enter()
                            .append('rect')
                            .attr('x', function (d) {
                            return xScale(d.x0);
                        })
                            .attr('y', function (d, i) {
                            return yScale(d.y);
                        })
                            .attr('height', function (d) {
                            return yScale.rangeBand();
                        })
                            .attr('width', function (d) {
                            return xScale(d.x);
                        })

                        svg.append('g')
                            .attr('class', 'axis')
                            .attr('transform', 'translate(0,' + height + ')')
                            .call(xAxis);

                    svg.append('g')
                        .attr('class', 'axis')
                        .call(yAxis);

                    svg.append('rect')
                        .attr('fill', 'yellow')
                        .attr('width', 160)
                        .attr('height', 30 * dataset.length)
                        .attr('x', width + margins.left)
                        .attr('y', 0);


                    series.forEach(function (s, i) {
                        svg.append('text')
                            .attr('fill', 'black')
                            .attr('x', width + margins.left + 8)
                            .attr('y', i * 24 + 24)
                            .text(s);
                        svg.append('rect')
                            .attr('fill', colours(i))
                            .attr('width', 60)
                            .attr('height', 20)
                            .attr('x', width + margins.left + 90)
                            .attr('y', i * 24 + 6);
                    });
                  })();
                </script>
              </div>
            <% } %>
          </div>
        <% } %>
      </div>
      <div class="row">
        <div class="col-xs-9">
          <p style="margin-top: 1rem; font-size: 1.2rem;">
            <strong>Inquiries</strong> 1-844-506-3965
            &nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Email</strong> info@tetrascience.com
            &nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Twitter</strong> TetraScience
          </p>
        </div>
        <div class="col-xs-3"><img src="../demo/images/util_logo.png" class="img-fill"></div>
      </div>
    </div>
    <script class="text/javascript">
      (function(){


        var margin = {
            top: 17,
            left: 148,
            right: 24,
            bottom: 5
        };

        var width = 500 - margin.left - margin.right;

        var height = 15 - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
            .domain([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
            .rangePoints([0, width]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .tickValues(x.domain().filter(function(d, i) { return !(i % 2); }))
            .orient("top");

        var svg = d3.selectAll(".d3axislabel").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        svg.append("g")
            .attr("class", "axis x-axis")
            .call(xAxis);
      })()
    </script>
  </body>
</html>